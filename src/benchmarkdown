#!/bin/bash

set -euo pipefail

function main()
{
    check_requirements
    check_arguments $@

    local save_data=false

    if [[ $1 == '--save-data' ]]
    then
        local save_data=true
        shift
    fi

    local filename=$1
    local output=${2-${filename%.md}.png}
    local data=${filename%.md}.csv

    if [[ ! "$save_data" ]]
    then
        data="$(mktemp)"
    fi

    generate "$filename" "$output" "$data"
}

function check_requirements()
{
    for requirement in R hyperfine
    do
        check_requirement "$requirement"
    done
}

function check_requirement()
{
    local requirement=$1

    set +e

    type "$requirement" &> /dev/null
    if [[ $? -ne 0 ]]
    then
        echo "$requirement is required to run this program."
        exit 1
    fi

    set -e
}

function check_arguments()
{
    if [[ $# -lt 1 || $# -gt 3 ]]
    then
        echo "$0 [--save-data] input.md [output.png]"
        exit 1
    fi
}

function generate()
{
    local filename=$1
    local output=$2
    local data=$3
    local state='initial'
    local code=
    local i=1
    local csv="tool,step,command,mean,stddev,median,user,system,min,max\n"
    local count=10

    local title=''
    local tool=''
    local step=''

    while read -r line
    do
        case "$line" in
            "")
            ;;
            '# '*)
                title=${line/\# }
            ;;
            '## '*)
                tool=${line/\#\# }
                (>&2 echo "$tool")
                step=''
            ;;
            '### '*)
                step=${line/\#\#\# }
                (>&2 echo "  * $step")
            ;;
            '```'*)
                case "$state" in
                    'initial')
                        if [[ "$line" =~ \`\`\`\{([0-9]+)\} ]]
                        then
                            count="${BASH_REMATCH[1]}"
                        else
                            count=10
                        fi

                        state='incode'
                    ;;
                    'incode')
                        if [[ "$step" == '' ]]
                        then
                            eval "$code"
                        else
                            local result=$(benchmark "$code" "$count")
                            csv="$csv$tool,$step,$result\n"
                        fi

                        code=
                        state='initial'
                    ;;
                    *)
                        echo "Invalid state '$state'"
                    ;;
                esac
            ;;
            '---')
                write_data "$csv" "${data%.csv}-$i.csv"
                draw_graph "${data%.csv}-$i.csv" "${output%.png}-$i.png" "$title"
                i=$(( $i + 1))
            ;;
            *)
                if [[ "$state" == 'incode' ]]
                then
                    code="$code$line;"
                fi
            ;;
        esac
    done <$filename

    write_data "$csv" "$data"
    draw_graph "$data" "$output" "$title"
}

function write_data()
{
    local csv=$1
    local filename=$2

    printf $"$csv" > "$filename"
}

function benchmark()
{
    local code=$1
    local count=$2

    hyperfine --style none --export-csv /dev/stdout --min-runs "$count" "$code" | tail -1
}

function draw_graph()
{
    local csv=$1
    local output=$2
    local title=$3
    local r_script='
error.bar <- function (x, y, upper, lower=upper, length=0.1, ...) {
    if (length(x) != length(y)
       | length(y) !=length(lower)
       | length(lower) != length(upper)
    ) {
        stop("vectors must be same length")
    }

    arrows(x, y + upper, x, y - lower, angle = 90, code = 3, length = length, ...)
}

args <- commandArgs(trailingOnly = TRUE)
output <- args[1]
title <- args[2]
png(output)

bench <- read.csv("'"$csv"'", header=TRUE, sep=",")

tools <- unique(bench$tool)
steps <- unique(bench$step)
mean <- t(array(bench$mean, dim=c(length(steps), length(tools)), dimnames=list(steps, tools)))
stddev <- t(array(bench$stddev, dim=c(length(steps), length(tools)), dimnames=list(steps, tools)))

graph <- barplot(mean, legend=tools, beside = TRUE, ylab="Duration (s)",
    ylim=c(0, max(mean) + max(stddev)), main = title, col = rainbow(length(tools)))
error.bar(graph, mean, stddev)'

    echo "$r_script" | R --no-save --slave --args "$output" "$title" 2> /dev/null
}

main $@
