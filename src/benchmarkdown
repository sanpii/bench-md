#!/bin/bash

set -euo pipefail

function main()
{
    check_requirements
    check_arguments $@

    local filename=$1
    local output=${2-${filename%.md}.png}

    generate "$filename" "$output"
}

function check_requirements()
{
    set +e

    type R &> /dev/null
    if [[ $? -ne 0 ]]
    then
        echo "R is required to run this program."
        exit 1
    fi

    set -e
}

function check_arguments()
{
    if [[ $# -lt 1 || $# -gt 2 ]]
    then
        echo "$0 input.md [output.png]"
        exit 1
    fi
}

function generate()
{
    local filename=$1
    local output=$2
    local state='initial'
    local code=
    local i=1
    local csv="tool,step,mean,sd\n"
    local count=10

    while read -r line
    do
        case "$line" in
            "")
            ;;
            '# '*)
                title=${line/\# }
            ;;
            '## '*)
                tool=${line/\#\# }
                (>&2 echo "$tool")
            ;;
            '### '*)
                step=${line/\#\#\# }
            ;;
            '```'*)
                case "$state" in
                    'initial')
                        if [[ "$line" =~ \`\`\`\{([0-9]+)\} ]]
                        then
                            count="${BASH_REMATCH[1]}"
                        else
                            count=10
                        fi

                        state='incode'
                    ;;
                    'incode')
                        local duration=$(benchmark "$step" "$code" "$count")
                        local mean=$(mean "$duration")
                        local sd=$(sd "$duration" "$mean")

                        csv="$csv$tool,$step,$mean,$sd\n"

                        code=
                        state='initial'
                    ;;
                    *)
                        echo "Invalid state '$state'"
                    ;;
                esac
            ;;
            '---')
                draw_graph "$csv" "${output%.png$}-$i.png" "$title"
                i=$(( $i + 1))
            ;;
            *)
                if [[ "$state" == 'incode' ]]
                then
                    code="$code$line;"
                fi
            ;;
        esac
    done <$filename

    draw_graph "$csv" "$output" "$title"
}

function benchmark()
{
    local step=$1
    local code=$2
    local count=$3

    for i in $(seq 1 $count)
    do
        (>&2 echo -n $'\r'"  * $step: $i/$count")
        echo -n "$(run "$code") "
    done
    (>&2 echo '')
}

function run()
{
    local code=$1

    local start=$(date +%s%N)
    eval "$code" >/dev/null
    local end=$(date +%s%N)

    echo $((end - start))
}

function mean()
{
    local durations=$1

    echo "$duration" | awk '{
        for (i = 1;i <= NF; i++) {
            sum += $i
        };
        print sum / NF
    }'
}

function sd()
{
    local durations=$1
    local mean=${2-$(mean "$durations")}

    echo "$duration" | awk -vM=5 "{
        for (i = 1; i <= NF; i++) {
            sum += (\$i-$mean) * (\$i-$mean)
        };
        print sqrt(sum / NF)
    }"
}

function draw_graph()
{
    local csv=$1
    local output=$2
    local title=$3
    local r_script='
error.bar <- function (x, y, upper, lower=upper, length=0.1, ...) {
    if (length(x) != length(y)
       | length(y) !=length(lower)
       | length(lower) != length(upper)
    ) {
        stop("vectors must be same length")
    }

    arrows(x, y + upper, x, y - lower, angle = 90, code = 3, length = length, ...)
}

args <- commandArgs(trailingOnly = TRUE)
output <- args[1]
title <- args[2]
png(output)

csv <- textConnection("'"$csv"'")
bench <- read.csv(csv, header=TRUE, sep=",")

tools <- unique(bench$tool)
steps <- unique(bench$step)
mean <- array(bench$mean, dim=c(length(tools), length(steps)), dimnames=list(tools, steps))
sd <- array(bench$sd, dim=c(length(tools), length(steps)), dimnames=list(tools, steps))

graph <- barplot(mean, legend=tools, beside = TRUE, ylab="Duration (ns)",
    ylim=c(0, max(mean) + max(sd)), main = title, col = rainbow(length(tools)))
error.bar(graph, mean, sd)'

    echo "$r_script" | R --no-save --slave --args "$output" "$title"
}

main $@
